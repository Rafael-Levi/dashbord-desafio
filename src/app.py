import streamlit as st
import pandas as pd
import plotly.express as px

# --- Carregar os dados ---
file_path = "../data/dados.xlsx"

df_resumo = pd.read_excel(file_path, sheet_name="Resumo Executivo")
df_analise = pd.read_excel(file_path, sheet_name="AnÃ¡lise CH por Escola")

# --- TÃ­tulo do app ---
st.set_page_config(page_title="Dashboard CH - TOM", layout="wide")
st.title("ğŸ“Š Dashboard Interativo - Repasse de Carga HorÃ¡ria")

# --- Filtros interativos ---
st.sidebar.header("Filtros")
meses = st.sidebar.multiselect("Selecione o(s) mes(es):", options=df_resumo["Meses"].unique(), default=df_resumo["Meses"].unique())
escolas = st.sidebar.multiselect("Selecione a(s) escola(s):", options=df_analise["Escola"].unique(), default=df_analise["Escola"].unique())

# Filtrar dados
df_resumo_f = df_resumo[df_resumo["Meses"].isin(meses)]
df_analise_f = df_analise[df_analise["Escola"].isin(escolas)]

# ForÃ§ar conversÃ£o numÃ©rica para colunas
for col in df_resumo.columns:
    if df_resumo[col].dtype == "object":
        df_resumo[col] = pd.to_numeric(df_resumo[col].astype(str).str.replace(",", "."), errors="ignore")

for col in df_analise.columns:
    if df_analise[col].dtype == "object":
        df_analise[col] = pd.to_numeric(df_analise[col].astype(str).str.replace(",", "."), errors="ignore")

# --- SeÃ§Ã£o 1: ComparaÃ§Ã£o VR2 ---
st.subheader("ComparaÃ§Ã£o VR2 - CH Pago TOM vs CH Contratada Governo")

# Transformar para formato "long" (melt) para que o plotly aceite duas colunas no eixo y
df_vr2 = df_resumo_f.melt(id_vars=["Meses"], 
                          value_vars=["*CH Pago Tom (ConversÃ£o Gov)", "CH Contratada Gov"],
                          var_name="Fonte", value_name="Carga HorÃ¡ria")

fig1 = px.bar(df_vr2, x="Meses", y="Carga HorÃ¡ria", color="Fonte",
              barmode="group", title="CH Pago (ConversÃ£o Gov) vs CH Contratada (Gov)",
              labels={"Carga HorÃ¡ria": "Carga HorÃ¡ria (h)", "Meses": "MÃªs"})
st.plotly_chart(fig1, use_container_width=True)

# DivergÃªncia em percentual (agora usando Meses tambÃ©m)
fig2 = px.line(df_resumo_f, x="Meses", y="% DivergÃªncia", markers=True,
               title="% DivergÃªncia por MÃªs (VR2)",
               labels={"% DivergÃªncia": "% DivergÃªncia", "Meses": "MÃªs"})
st.plotly_chart(fig2, use_container_width=True)

# --- SeÃ§Ã£o 2: AnÃ¡lise por Escola ---
st.subheader("AnÃ¡lise de CH por Escola (RegÃªncia e NÃ£o RegÃªncia)")

# Agregar os valores da anÃ¡lise por escola
df_escola = df_analise_f.groupby("Escola", as_index=False).agg({
    "CH RegÃªncia": "sum",
    "CH Sem RegÃªncia": "sum",
    "Valor CH Mensal": "sum"
})

fig3 = px.bar(df_escola, x="Escola", y=["CH RegÃªncia", "CH Sem RegÃªncia"],
              barmode="stack", title="DistribuiÃ§Ã£o de Carga HorÃ¡ria por Escola",
              labels={"value": "Carga HorÃ¡ria", "variable": "Categoria"})
st.plotly_chart(fig3, use_container_width=True)

# Valor financeiro total
fig4 = px.bar(df_escola, x="Escola", y="Valor CH Mensal",
              title="Valor Total (R$) de Carga HorÃ¡ria por Escola",
              labels={"Valor CH Mensal": "Valor Total (R$)"})
st.plotly_chart(fig4, use_container_width=True)

# --- SeÃ§Ã£o 3: Tabelas Detalhadas ---
st.subheader("ğŸ“„ Dados Detalhados")
with st.expander("Ver Resumo Executivo"):
    st.dataframe(df_resumo_f)

with st.expander("Ver AnÃ¡lise CH por Escola"):
    st.dataframe(df_analise_f)
